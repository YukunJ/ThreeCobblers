package edu.cmu.cc.webtier;

import java.util.ArrayList;
import java.util.List;

public class Utils {
    public static char[][] alignmentul =
            {{'1', '1', '1', '1', '1', '1', '1', '0'},
                    {'1', '0', '0', '0', '0', '0', '1', '0'},
                    {'1', '0', '1', '1', '1', '0', '1', '0'},
                    {'1', '0', '1', '1', '1', '0', '1', '0'},
                    {'1', '0', '1', '1', '1', '0', '1', '0'},
                    {'1', '0', '0', '0', '0', '0', '1', '0'},
                    {'1', '1', '1', '1', '1', '1', '1', '0'},
                    {'0', '0', '0', '0', '0', '0', '0', '0'}};


    private static char[][] alignmentulEcodedV1 =
            {{'0', '1', '1', '0', '0', '1', '1', '0'},
            {'0', '1', '1', '1', '0', '0', '0', '0'},
            {'0', '0', '0', '1', '1', '1', '0', '1'},
            {'1', '0', '0', '0', '1', '0', '0', '1'},
            {'1', '1', '1', '1', '1', '0', '1', '0'},
            {'1', '0', '0', '0', '0', '0', '1', '0'},
            {'1', '1', '0', '0', '1', '1', '1', '0'},
            {'1', '1', '1', '0', '0', '1', '0', '1'}};


    public static char[][] alignmentll =
            {{'0', '0', '0', '0', '0', '0', '0', '0'},
            {'1', '1', '1', '1', '1', '1', '1', '0'},
            {'1', '0', '0', '0', '0', '0', '1', '0'},
            {'1', '0', '1', '1', '1', '0', '1', '0'},
            {'1', '0', '1', '1', '1', '0', '1', '0'},
            {'1', '0', '1', '1', '1', '0', '1', '0'},
            {'1', '0', '0', '0', '0', '0', '1', '0'},
            {'1', '1', '1', '1', '1', '1', '1', '0'},
            };

    private static char[][] matrixV1 =
            {
            {'0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '0', '1'},
            {'0', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
            {'0', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1'},
            {'1', '0', '0', '0', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1'},
            {'1', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1'},
            {'1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '0', '0', '1'},
            {'1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'0', '0', '1', '0', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            };


    private static char[][] matrixV2 =
            {{'0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0'},
            {'1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', '1', '0'},
            {'0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '1', '1', '0', '1', '0', '0', '0'},
            {'1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '1', '0'},
            {'0', '1', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '1'},
            {'1', '0', '0', '1', '1', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0'},
            {'1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '0', '1', '1'},
            {'1', '0', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0'},
            {'1', '1', '0', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '1'},
            {'0', '1', '0', '0', '1', '0', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '0', '0', '1'},
            {'1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0'},
            {'1', '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1'},
            {'0', '0', '0', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '1', '0'},
            {'1', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '0', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0'},
            {'0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0'},
            {'1', '1', '0', '1', '1', '0', '0', '1', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '1', '1', '0', '0'},
            {'0', '0', '1', '0', '0', '1', '0', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '1', '0', '0'},
            {'1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1'},
            {'0', '1', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1'},
            {'1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1'},
            {'0', '0', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '0'},
            {'1', '1', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0'},
            {'0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '0', '0', '0'},
            };


    private static char[][] alignllEncodedV1 =
            {{'1', '0', '1', '0', '0', '0', '0', '1'},
            {'1', '0', '1', '0', '0', '0', '0', '1'},
            {'1', '0', '0', '0', '0', '0', '1', '0'},
            {'0', '0', '1', '0', '1', '1', '0', '1'},
            {'1', '1', '0', '1', '1', '0', '0', '1'},
            {'1', '0', '1', '1', '1', '0', '0', '1'},
            {'1', '0', '1', '1', '1', '0', '1', '0'},
            {'1', '1', '1', '1', '1', '0', '0', '0'}};


    private static char[][] alignurEncodedV1 =
            {{'0', '0', '1', '0', '0', '1', '0', '1'},
            { '0', '1', '1', '0', '1', '1', '1', '1'},
            { '1', '1', '0', '0', '0', '0', '0', '1'},
            { '1', '0', '1', '0', '0', '1', '1', '1'},
            { '1', '0', '1', '0', '0', '0', '1', '1'},
            { '0', '1', '1', '0', '0', '0', '0', '1'},
            { '1', '1', '1', '1', '1', '0', '0', '1'},
            { '1', '0', '0', '0', '1', '0', '1', '1'}};


    public static char[][] alignmentur =
            {{'0', '1', '1', '1', '1', '1', '1', '1'},
            {'0', '1', '0', '0', '0', '0', '0', '1'},
            {'0', '1', '0', '1', '1', '1', '0', '1'},
            {'0', '1', '0', '1', '1', '1', '0', '1'},
            {'0', '1', '0', '1', '1', '1', '0', '1'},
            {'0', '1', '0', '0', '0', '0', '0', '1'},
            {'0', '1', '1', '1', '1', '1', '1', '1'},
            {'0', '0', '0', '0', '0', '0', '0', '0'}};


    public static char[][] alignment2 =  {
            {'1', '1', '1', '1', '1'},
            {'1', '0', '0', '0', '1'},
            {'1', '0', '1', '0', '1'},
            {'1', '0', '0', '0', '1'},
            {'1', '1', '1', '1', '1'}};


    public static char[] time = {'1', '0', '1', '0', '1', '0', '1', '0', '1'};


    private static int[] Cs0V1 = {20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19,
            20, 19, 20, 19, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18,
            17, 18, 17, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15,
            16, 15, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14,
            13, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
            12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10,
            9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 8, 7, 8, 7, 8, 7, 8,
            7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0};


    private static int[] Rs0V1 = {20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10,
            9, 9, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20,
            20, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 8,
            8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 20, 20, 19,
            19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 5, 5, 4, 4, 3,
            3, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
            14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 8, 8, 9, 9, 10,
            10, 11, 11, 12, 12, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12};

    private static int[] Cs0V2 = {24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24,
            23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21,
            22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 20, 19, 20, 19, 20, 19, 20,
            19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17,
            18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16,
            15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 14, 13,
            14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14,
            13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 12, 11, 12, 11, 12, 11, 12, 11,
            12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12,
            11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9,
            10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10,
            9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
            4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0};

    private static int[] Rs0V2 = {24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14,
            14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
            16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 24, 24, 23, 23, 22, 22, 21, 21, 15,
            15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14,
            15, 15, 21, 21, 22, 22, 23, 23, 24, 24, 24, 24, 23, 23, 22, 22, 21, 21, 15, 15, 14, 14, 13, 13, 12, 12, 11,
            11, 10, 10, 9, 9, 8, 8, 7, 7, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 7, 7,
            8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21,
            22, 22, 23, 23, 24, 24, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14,
            14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2,
            3, 3, 4, 4, 5, 5, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18,
            19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9,
            9, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 15, 15, 14, 14, 13, 13,
            12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16};

    private static char[][] lgV1 = {
            {'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0'} ,
            {'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0'} ,
            {'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0'} ,
            {'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0'} ,
            {'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0'} ,
            {'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0'} ,
            {'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0'} ,
            {'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1'} ,
            {'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0'} ,
            {'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0'} ,
            {'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0'} ,
            {'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1'} ,
            {'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0'} ,
            {'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0'} ,
            {'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1'} ,
            {'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0'} ,
            {'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1'} ,
            {'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1'} ,
            {'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0'} ,
            {'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1'} ,
            {'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0'} };


    private static char[][] lgV2 = {
           {'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1'} ,
           {'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1'} ,
           {'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1'} ,
           {'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1'} ,
           {'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0'} ,
           {'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1'} ,
           {'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0'} ,
           {'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0'} ,
           {'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1'} ,
           {'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1'} ,
           {'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0'} ,
           {'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1'} ,
           {'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1'} ,
           {'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0'} ,
           {'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1'} ,
           {'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0'} ,
           {'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0'} ,
           {'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0'} ,
           {'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0'} ,
           {'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1'} ,
           {'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1'} ,
           {'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1'} ,
           {'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0'} ,
           {'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0'} ,
           {'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0'}};

    private static char[][] lgDecode = {
            {'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0'},
            {'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0'},
            {'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1'},
            {'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0'},
            {'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1'},
            {'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0'},
            {'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0'},
            {'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1'},
            {'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0'},
            {'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0'},
            {'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0'},
            {'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0'},
            {'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1'},
            {'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1'},
            {'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0'},
            {'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0'},
            {'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0'},
            {'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0'},
            {'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0'},
            {'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1'},
            {'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1'},
            {'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0'},
            {'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1'},
            {'1' ,'0' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0'},
            {'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'0'},
            {'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1'},
            {'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1'},
            {'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'0'},
            {'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1'},
            {'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'1' ,'1'},
            {'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'0' ,'1' ,'0' ,'1' ,'1' ,'1' ,'1' ,'1' ,'1'},
            {'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'1' ,'1' ,'0' ,'0' ,'0' ,'0' ,'0' ,'1' ,'0' ,'0' ,'1' ,'1' ,'0' ,'1' ,'1' ,'0' ,'0' ,'1' ,'1' ,'1' ,'1'},
            };



    public static String qr2String(char[][] qr) {
        StringBuilder ret = new StringBuilder();
        for (char[] arr : qr){
            ret.append(new String(arr));
        }
        return ret.toString();
    }

    public static String binaryString2Hex(String bin) {
        StringBuilder ret = new StringBuilder();
        int i = 32;
        for (;i <= bin.length(); i+=32) {
            long decimal = Long.parseLong(bin.substring(i - 32, i), 2);
            String hexStr = "0x" + Long.toString(decimal,16);
            ret.append(hexStr);
        }
        if (i - 32 < bin.length()) {
            long decimal = Long.parseLong(bin.substring(i - 32), 2);
            String hexStr = "0x" + Long.toString(decimal,16);
            ret.append(hexStr);
        }
        return ret.toString();
    }

    public static String encodeQrV2(String zigzaged) {
        char[] ret = new char[zigzaged.length()];
        for(int i = 0, j = 0; i < zigzaged.length(); i += 8, j ++) {
            for (int k = 0; k < 8; k++) {
                if (i + k >= zigzaged.length()) {
                    break;
                }
                ret[i + k] = '0';
                if (lgDecode[(i + k)/32][(i + k)%32] != zigzaged.charAt(i + k)) {
                    ret[i + k] = '1';
                }
            }
        }
        return new String(ret);
    }

    public static String encodeQr(int[] lgMap, String zigzaged) {
        char[] ret = new char[zigzaged.length()];
        for(int i = 0, j = 0; i < zigzaged.length(); i += 8, j ++) {
            String lg = "0000000" + Integer.toBinaryString(lgMap[j]);
            int lgSize = lg.length();
            for (int k = 0; k < 8; k++) {
                if (i + k >= zigzaged.length()) {
                    break;
                }
                ret[i + k] = '0';
                if (lg.charAt(lgSize - k - 1) != zigzaged.charAt(i + k)) {
                    ret[i + k] = '1';
                }
            }
        }
        return new String(ret);
    }

    public static void decodeStrV2(char[] str, char[][] matrix) {
        int ind;
        for(int i = 0; i < 32; i++) {
            for (int j = 0; j < 32; j++) {
                ind = i*32 + j;
                if (ind >= str.length) {
                    break;
                }
                if (lgDecode[i][j] != str[ind]) {
                    matrix[i][j] = '1';
                } else {
                    matrix[i][j] = '0';
                }
            }
        }
    }

    public static void decodeStr(int[] lgMap, char[] str, char[][] matrix, int versionSize) {

//        char[][] lgMatrix = new char[32][32];
        char[][] test = new char[32][32];
        for(int i = 0, j = 0; i < str.length; i += 8, j ++) {
            String lg = "0000000" + Integer.toBinaryString(lgMap[j]);
            int lgSize = lg.length();
            for (int k = 0; k < 8; k++) {
                if (i + k >= str.length) {
                    break;
                }
                matrix[(i + k)/versionSize][(i + k)%versionSize] = '0';
                if (lg.charAt(lgSize - k - 1) != str[i + k]) {
                    matrix[(i + k)/versionSize][(i + k)%versionSize] = '1';
                }
                test[(i + k)/versionSize][(i + k)%versionSize] = '0';
                if (lgDecode[(i + k)/versionSize][(i + k)%versionSize] != str[i + k]) {
                    test[(i + k)/versionSize][(i + k)%versionSize] = '1';
                }
//                lgMatrix[(i + k)/versionSize][(i + k)%versionSize] = lg.charAt(lgSize - k - 1);
            }
        }
//        printQr(test);
//        printQr(lgMatrix);
    }

    public static int[] logisticMap(int qrSize) {
        int lgSize = qrSize*qrSize/8 + 1;
        int[] ints = new int[lgSize];
        double x = 0.1;
        double r = 4.0;
        for(int i = 0; i < lgSize; i++) {
            ints[i] = (int)(x*255);
            x = r*x*(1 - x);
        }
        return ints;
    }


    public static char[][] matrixV1() {
        char[][] result = new char[matrixV1.length][];
        for (int r = 0; r < matrixV1.length; r++) {
            result[r] = matrixV1[r].clone();
        }
        return result;
    }


    public static String zigzagRead0(char[][] qr, int R, int C, int version) {
        int[] Cs;
        int[] Rs;
        int limit;
        if (version == 1) {
            Cs = Cs0V1;
            Rs = Rs0V1;
            limit = 224;
        } else {
            Cs = Cs0V2;
            Rs = Rs0V2;
            limit = 370;
        }
        StringBuilder payload = new StringBuilder();
        char[] current = new char[8];
        int r, c;
        for (int i = 0; i < 8; i++) {
            r = R + Rs[i];
            c = C + Cs[i];
            current[i%8] = qr[r][c];
        }
        int plSize = Integer.parseInt(new String(current), 2);
        for(int i = 8; i < limit; i++) {
            r = R + Rs[i];
            c = C + Cs[i];
            current[i%8] = qr[r][c];
            if (i%8 == 7) {
                i += 8;
                String bin = new String(current);
                payload.append((char) Integer.parseInt(bin, 2));
                if (payload.length() >= plSize) {
                    return payload.toString();
                }
            }
        }
        return payload.toString();
    }

    public static String zigzagRead90(char[][] qr, int R, int C, int version) {
        int[] Cs;
        int[] Rs;
        int limit;
        if (version == 1) {
            Cs = Cs0V1;
            Rs = Rs0V1;
            limit = 224;
        } else {
            Cs = Cs0V2;
            Rs = Rs0V2;
            limit = 370;
        }

        StringBuilder payload = new StringBuilder();
        char[] current = new char[8];
        int r, c;
        for (int i = 0; i < 8; i++) {
            r = R + Cs[i];
            c = C - Rs[i];
            current[i%8] = qr[r][c];
        }
        int plSize = Integer.parseInt(new String(current), 2);
        for(int i = 8; i < limit; i++) {
            r = R + Cs[i];
            c = C - Rs[i];
            current[i%8] = qr[r][c];
            if (i%8 == 7) {
                i += 8;
                String bin = new String(current);
                payload.append((char) Integer.parseInt(bin, 2));
                if (payload.length() >= plSize) {
                    return payload.toString();
                }
            }
        }
        return payload.toString();
    }

    public static String zigzagRead180(char[][] qr, int R, int C, int version) {
        int[] Cs;
        int[] Rs;
        int limit;
        if (version == 1) {
            Cs = Cs0V1;
            Rs = Rs0V1;
            limit = 224;
        } else {
            Cs = Cs0V2;
            Rs = Rs0V2;
            limit = 370;
        }
        StringBuilder payload = new StringBuilder();
        char[] current = new char[8];
        int r, c;
        for (int i = 0; i < 8; i++) {
            r = R - Rs[i];
            c = C - Cs[i];
            current[i%8] = qr[r][c];
        }
        int plSize = Integer.parseInt(new String(current), 2);
        for(int i = 8; i < limit; i++) {
            r = R - Rs[i];
            c = C - Cs[i];
            current[i%8] = qr[r][c];
            if (i%8 == 7) {
                i += 8;
                String bin = new String(current);
                payload.append((char) Integer.parseInt(bin, 2));
                if (payload.length() >= plSize) {
                    return payload.toString();
                }
            }
        }
        return payload.toString();
    }

    public static String zigzagRead270(char[][] qr, int R, int C, int version) {
        int[] Cs;
        int[] Rs;
        int limit;
        if (version == 1) {
            Cs = Cs0V1;
            Rs = Rs0V1;
            limit = 224;
        } else {
            Cs = Cs0V2;
            Rs = Rs0V2;
            limit = 370;
        }
        StringBuilder payload = new StringBuilder();
        char[] current = new char[8];
        int r, c;
        for (int i = 0; i < 8; i++) {
            r = R - Cs[i];
            c = C + Rs[i];
            current[i%8] = qr[r][c];
        }
        int plSize = Integer.parseInt(new String(current), 2);
        for(int i = 8; i < limit; i++) {
            r = R - Cs[i];
            c = C + Rs[i];
            current[i%8] = qr[r][c];
            if (i%8 == 7) {
                i += 8;
                String bin = new String(current);
                payload.append((char) Integer.parseInt(bin, 2));
                if (payload.length() >= plSize) {
                    return payload.toString();
                }
            }
        }
        return payload.toString();
    }


    public static void zigzagV1(char[][] qr, String payload) {
        int c ,r;
        StringBuilder payloadBuilder = new StringBuilder(payload);
        while (payloadBuilder.length() < 224) {
            payloadBuilder.append("1110110000010001");
        }
        char cur;
        payload = payloadBuilder.toString();
        for (int i = 0; i < 224; i++) {
            r = Rs0V1[i];
            c = Cs0V1[i];
            cur = payload.charAt(i);
            if (cur == lgV1[r][c]) cur = '0';
            else cur = '1';
            qr[r][c] = cur;
        }
    }

    public static void zigzagV2(char[][] qr, String payload) {
        int c, r;
        StringBuilder payloadBuilder = new StringBuilder(payload);
        while (payloadBuilder.length() < 370) {
            payloadBuilder.append("1110110000010001");
        }
        char cur;
        payload = payloadBuilder.toString();
        for (int i = 0; i < 370; i++) {
            c = Cs0V2[i];
            r = Rs0V2[i];
            cur = payload.charAt(i);
            if (cur == lgV2[r][c]) cur = '0';
            else cur = '1';
            qr[r][c] = cur;
        }
    }


    public static char[][] matrixV2() {
        char[][] result = new char[matrixV2.length][];
        for (int r = 0; r < matrixV2.length; r++) {
            result[r] = matrixV2[r].clone();
        }
        return result;
    }


    public static int errorCode(String bin) {
        int error = Character.getNumericValue(bin.charAt(0));
        for(int i = 1; i < 8; i++) {
            error = error ^  Character.getNumericValue(bin.charAt(i));
        }
        return error;
    }


    public static String payload(String s) {
        int stringSize = s.length();
//        char[] chars = s.toCharArray();
        String sizeString = Integer.toBinaryString(stringSize);
        StringBuilder result = new StringBuilder(String.format("%8s", sizeString).replaceAll(" ", "0"));
        char c;
        for (int i = 0; i < stringSize; i++) {
            c = s.charAt(i);
            String bin = String.format("%8s", Integer.toBinaryString(c)).replaceAll(" ", "0");
            result.append(bin);
            result.append(String.format("%8s", Integer.toBinaryString(errorCode(bin))).replaceAll(" ", "0"));
        }
        return result.toString();
    }


    public static char[][] messageToCharArray(String hex) {
        String[] arrOfStr = hex.substring(2).split("0x", 32);
        char[] arr = new char[32*32];
        char[][] matrix = new char[32][32];
//        int ind, r, c;
        char cur;
        for (int j  = 0; j < arrOfStr.length; j++) {
            String str = arrOfStr[j];
//            long a = Long.parseLong(str, 16);
//            String bin = Long.toBinaryString(a);
            long a = Long.parseLong(str, 16);
            String bin = Long.toBinaryString(a);
            int binLen = bin.length();
            for(int i = 0; i < 32; i++) {
//                ind = j*32 + 31 - i;
                if (i >= binLen) {
                    cur = '0';
                } else {
                    cur = bin.charAt((binLen - 1 - i));
                }
                if (cur == lgDecode[j][31 - i]) {
                    matrix[j][31 - i] = '0';
                } else {
                    matrix[j][31 - i] = '1';
                }
            }
        }
        return matrix;
    }


    private static boolean findPattern(char[][] message, int i, int j) {
        if(i < 0 || j < 0) return false;
        if (i + 7 > message.length || j + 7 > message[0].length) return false;
        for (int k = 0; k < 7; k++) {
            for (int l = 0; l < 7; l++) {
                if (message[i + k][j + l] != alignmentul[k][l]) {
                    return false;
                }
            }
        }
        return true;
    }


    public static String reverseLgDecodeFasterV2(char[][] message) {
//        char[][] message = new char[32][32];
//        decodeStrV2(arr, message);
        boolean found = true;
        int i = 0, j = 0;
        for (; i <= 11; i++) {
            j = 0;
            for (; j < 27; j++) {
                found = findPattern(message, i, j);
                if (found) break;
            }
            if (found) break;
        }
        boolean findRightV1 = findPattern(message, i, j + 14);
        boolean findDownV1 = findPattern(message, i + 14, j);

        if (findDownV1) {
            if (findRightV1) {
                // V1, 0
                return zigzagRead0(message, i, j, 1);
            }
            if (findPattern(message, i + 14, j - 14)) {
                // V1, 180
                return zigzagRead180(message, i + 20, j + 6, 1);
            }
        }
        boolean findDownRightV1 = findPattern(message, i + 14, j + 14);
        if (findDownV1 && findDownRightV1) {
            // V1, 270
            return zigzagRead270(message, i + 20, j, 1);
        }
        if(findRightV1 && findDownRightV1)  return zigzagRead90(message, i, j + 20, 1);

        boolean findDownV2 = findPattern(message, i + 18, j);
        boolean findRightV2 = findPattern(message, i, j + 18);
        if (findDownV2) {
            if (findRightV2) {
                // V2, 0
                return zigzagRead0(message, i, j, 2);
            }
            if (findPattern(message, i + 18, j - 18)) {
                // V2, 180
                return zigzagRead180(message, i + 24, j + 6, 2);
            }
        }
        boolean findDownRightV2 = findPattern(message, i + 18, j + 18);
        if (findDownV2 && findDownRightV2) {
            // V2, 270
            return zigzagRead270(message, i + 24, j, 2);
        }
        if (findRightV2 && findDownRightV2) return zigzagRead90(message, i, j + 24, 2);
        return "";
    }

    private static void encodeQR(char[][] qr, char[][] lgMap, int version) {
        for(int i = 0; i < version; i++) {
            for (int j = 0; j < version; j++) {
                if (qr[i][j] == lgMap[i][j]) qr[i][j] = '0';
                else qr[i][j] = '1';
            }
        }
        printQr(qr);
    }


    public static void printQr(char[][] qr) {
        System.out.print("{");
        for (char[] x : qr)
        {
            System.out.print("{");
            for (char y : x)
            {
                System.out.print("\'" + y + "\', ");
            }
            System.out.print("}, ");
            System.out.println();
        }
        System.out.print("}");
    }

    public static void main(String[] args) throws Exception {
        String s = "0xbce2ec90x8c513f080xc40fdd080x56ce896c0x3c5a32e00x27e39c110xb80380490x9e91869d0xfc7eec870x65dba8f20x983369310x395f7a590xea3d06860xbc6da37e0x191e1d2d0x1137dafb0xf5f891990x8e87514a0x4190b2db0xb268ab9b0x28a8cd1f0x26955b650x6fb50f9f0x28cad84f0x80d59f1d0xbb6678410xfeb46fb20x22e9565a0xe1acc7b10xb6d5d9860x4abad0980x3c51cb68";
        String toEncode = "aaaaaaaaaaaaaaaaa";
        String payLoadString = Utils.payload(toEncode);
//        System.out.println(Cs0V1.length);
//        System.out.println(Rs0V1.length);
        char[][] message = new char[32][32];
        char[][] qrV2 = matrixV2();
//        char[][] qrV1 = matrixV1();
        zigzagV2(qrV2, payLoadString);
        String zigzaged = qr2String(qrV2);
//        System.out.println(binaryString2Hex(zigzaged));
//        zigzagV1(qrV1, toEncode);
//        String zigzaged = Utils.qr2String(qrV1);
//        int[] lgMap = logisticMap(21);
//        String encoded = encodeQr(lgMap, zigzaged);
//        String testEncode = encodeQrV2(zigzaged);
//        System.out.println(encoded);
//        System.out.println(testEncode);
//        System.out.println(encoded.equals(testEncode));
//        char[][] msg = messageToCharArray(s);
//        printQr(msg);
//        decodeStr(lgMap, msg, message, 32);
//        printQr(message);
//        printQr(message);
//        System.out.println(Rs0V2.length);
//        System.out.println(Cs0V2.length);
//        System.out.println(reverseLgDecodeFaster(lgMap, msg));
//        System.out.println(reverseLgDecodeFasterV2(msg));
    }

}